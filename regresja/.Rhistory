partial(gbm_mod, pred.var = "x_2", n.trees = ntree)
partial(gbm_mod, pred.var = "x_2", n.trees = ntree)
pdp_fun <- partial(gbm_mod, pred.var = "x_2", n.trees = ntree)
plotPartial(pdp_fun)
sgb
# Create and plot ICE object:
# To predict with the cross-validated number of trees, we pass a custom predict function
gbm.ice = ice(gbm_mod, X, predictor = "x_3",
predictfcn = function(object, newdata){predict(object, newdata, n.tree = ntree)},
frac_to_build = 1)
#plot only 5% of curves with quantiles, actual pdp, and original points.
plot(gbm.ice, x_quantile = F, plot_pdp = T, frac_to_plot = 0.05)
pdp_fun <- partial(gbm_mod, pred.var = "x_2", pred.fun = predictfcn = function(object, newdata){predict(object, newdata, n.tree = ntree)}, n.trees = ntree,)
pdp_fun <- partial(gbm_mod, pred.var = "x_2", pred.fun = function(object, newdata){predict(object, newdata, n.tree = ntree)}, n.trees = ntree,)
pdp_fun <- partial(gbm_mod, pred.var = "x_2",
pred.fun = function(object, newdata){predict(object, newdata, n.tree = ntree)}, n.trees = ntree,
recursive = FALSE)
plotPartial(pdp_fun)
pdp_fun <- partial(gbm_mod, pred.var = "x_2",
pred.fun = function(object, newdata){predict(object, newdata, n.tree = ntree)},
recursive = FALSE)
plotPartial(pdp_fun)
# Load required packages
library(ggplot2)  # required to use autoplot
library(randomForest)
# Fit a random forest to the Boston housing data
data (boston)  # load the boston housing data
set.seed(101)  # for reproducibility
boston.rf <- randomForest(cmedv ~ ., data = boston)
# Partial dependence of cmedv on lstat
boston.rf %>%
partial(pred.var = "lstat") %>%
plotPartial(rug = TRUE, train = boston)
# Partial dependence of cmedv on lstat
boston.rf %>%
partial(pred.var = "lstat") %>%
plotPartial(train = boston)
# Partial dependence of cmedv on lstat
boston.rf %>%
partial(pred.var = "lstat") %>%
plotPartial()
View(pdp_fun)
pdp_fun <- partial(gbm_mod, pred.var = "x_2",
pred.fun = function(object, newdata){predict(object, newdata, n.tree = ntree)},
recursive = FALSE, ice = FALSE)
plotPartial(pdp_fun)
pdp_fun <- partial(gbm_mod, pred.var = "x_2",
pred.fun = function(object, newdata){predict(object, newdata, n.tree = ntree)},
recursive = FALSE, ice = FALSE, plot = TRUE)
partial(gbm_mod, pred.var = "x_2",
pred.fun = function(object, newdata){predict(object, newdata, n.tree = ntree)},
recursive = FALSE, ice = FALSE, plot = TRUE)
pdp_fun <- partial(gbm_mod, pred.var = "x_2",
#pred.fun = function(object, newdata){predict(object, newdata, n.tree = ntree)},
recursive = FALSE, ice = FALSE, plot = TRUE)
plotPartial(pdp_fun)
pdp_fun <- partial(gbm_mod, pred.var = "x_2",
pred.fun = function(object, newdata){predict(object, newdata, n.tree = ntree)},
recursive = FALSE, ice = FALSE, plot = TRUE)
pdp_fun <- partial(gbm_mod, pred.var = "x_2",
pred.fun = function(object, newdata){predict(object, newdata, n.tree = ntree)},
recursive = FALSE, ice = FALSE)
pdp_fun <- partial(gbm_mod, pred.var = "x_2")
plotPartial(pdp_fun)
pdp_fun <- partial(gbm_mod, pred.var = "x_2", n.trees = ntree)
plotPartial(pdp_fun)
pdp_fun <- partial(gbm_mod, pred.var = "x_2", n.trees = ntree, grid.resolution = 1000)
plotPartial(pdp_fun)
# generate data:
interaction_ex_data = interaction_ex_sim(1000)
Xy = interaction_ex_data$Xy
gbm_mod = gbm(y ~ ., data = Xy, n.tree = 500,
interaction.depth = 3, shrinkage = 0.1, cv.folds = 5)
ntree = gbm.perf(gbm_mod, method = "cv")
pdp_fun <- partial(gbm_mod, pred.var = "x_2", n.trees = ntree, grid.resolution = 1000)
plotPartial(pdp_fun)
pdp_fun <- partial(gbm_mod, pred.var = "x_2", n.trees = ntree, grid.resolution = 10000)
plotPartial(pdp_fun)
pdp_fun <- partial(gbm_mod, pred.var = "x_2", n.trees = ntree, grid.resolution = 100)
plotPartial(pdp_fun)
pdp_fun <- partial(gbm_mod, pred.var = "x_2", n.trees = ntree, grid.resolution = 1000)
plotPartial(pdp_fun)
pdp_fun <- partial(gbm_mod, pred.var = "x_2", n.trees = ntree, pred.grid = Xy$x_2)
pdp_fun <- partial(gbm_mod, pred.var = "x_2", n.trees = ntree, pred.grid = as.data.frame(Xy$x_2))
pdp_fun <- partial(gbm_mod, pred.var = "x_2", n.trees = ntree, pred.grid = Xy)
plotPartial(pdp_fun)
View(pdp_fun)
pdp_fun <- partial(gbm_mod, pred.var = "x_2", n.trees = ntree, pred.grid = data.frame(x_2 = Xy$x_2))
plotPartial(pdp_fun)
plot(Xy$x_2, Xy$y)
gbm.ice = ice(gbm_mod, X, predictor = "x_3",
predictfcn = function(object, newdata){predict(object, newdata, n.tree = ntree)},
frac_to_build = 1)
#plot only 5% of curves with quantiles, actual pdp, and original points.
plot(gbm.ice, x_quantile = F, plot_pdp = T, frac_to_plot = 0.05)
gbm.ice = ice(gbm_mod, X, predictor = "x_2",
predictfcn = function(object, newdata){predict(object, newdata, n.tree = ntree)},
frac_to_build = 1)
plot(gbm.ice, x_quantile = F, plot_pdp = T, frac_to_plot = 0.05)
# generate data:
interaction_ex_data = interaction_ex_sim(1000)
Xy = interaction_ex_data$Xy
gbm.ice = ice(gbm_mod, X, predictor = "x_2",
predictfcn = function(object, newdata){predict(object, newdata, n.tree = ntree)},
frac_to_build = 1)
plot(gbm.ice, x_quantile = F, plot_pdp = T, frac_to_plot = 0.05)
gbm.ice = ice(gbm_mod, interaction_ex_data$X, predictor = "x_2",
predictfcn = function(object, newdata){predict(object, newdata, n.tree = ntree)},
frac_to_build = 1)
plot(gbm.ice, x_quantile = F, plot_pdp = T, frac_to_plot = 0.05)
X = interaction_ex_data$X
gbm_mod = gbm(y ~ ., data = Xy, n.tree = 500,
interaction.depth = 3, shrinkage = 0.1, cv.folds = 5)
ntree = gbm.perf(gbm_mod, method = "cv")
pdp_fun <- partial(gbm_mod, pred.var = "x_2", n.trees = ntree, pred.grid = data.frame(x_2 = Xy$x_2))
### Fig 1: the PDP
# Note we can plot Friedman's PDP from Section 2
# by making the individual curves in the ICE white:
par(mar = c(4.3, 4, 0.1, 0.3))
plot(rf.ice, plot_pdp = TRUE, colorvec = rep("white", nrow(X)), plot_orig_pts_preds = FALSE)
library(randomForest)
interaction_ex_sim = function(n,seednum=NULL){
if(!is.null(seednum)){
set.seed(seednum)
}
p = 3
X = matrix(runif(n * p, -1, 1), ncol = p)
colnames(X) = paste("x_", 1 : p , sep = "")
#coefficients dependent on level of x_3:
bbeta1 = as.matrix(c(0.2, 5, 0))
bbeta2 = as.matrix(c(0.2, -5, 0))
#now generate y
y = array(NA, n)
for (i in 1 : n){
if (X[i, 3] >= 0 ){
y[i] = X[i, ] %*% bbeta1
} else {
y[i] = X[i, ] %*% bbeta2
}
}
Xy = as.data.frame(cbind(X, y))
X = as.data.frame(X)
return(list(Xy=Xy,X=X,y=y))
}
library(pdp)
library(gbm)
library(randomForest)
library(gam)
# generate data:
interaction_ex_data = interaction_ex_sim(1000)
Xy = interaction_ex_data$Xy
X = interaction_ex_data$X
gbm_mod = gbm(y ~ ., data = Xy, n.tree = 500,
interaction.depth = 3, shrinkage = 0.1, cv.folds = 5)
ntree = gbm.perf(gbm_mod, method = "cv", plot.it = FALSE)
gbm_mod = gbm(y ~ ., data = Xy, n.tree = 500,
interaction.depth = 3, shrinkage = 0.1, cv.folds = 5)
ntree = gbm.perf(gbm_mod, method = "cv")
pdp_fun <- partial(gbm_mod, pred.var = "x_2", n.trees = ntree, pred.grid = data.frame(x_2 = Xy$x_2))
plot(Xy$x_2, Xy$y)
plotPartial(pdp_fun)
library(ICEbox)
gbm.ice = ice(gbm_mod, interaction_ex_data$X, predictor = "x_2",
predictfcn = function(object, newdata){predict(object, newdata, n.tree = ntree)},
frac_to_build = 1)
plot(gbm.ice, x_quantile = F, plot_pdp = T, frac_to_plot = 0.05)
data(Boston)
X = Boston
y = X$medv
X$medv = NULL
rf_mod = randomForest(X, y)
rf.ice = ice(rf_mod, X, y, predictor = "age", frac_to_build = 1)
par(mar = c(4.3, 4, 0.1, 0.3))
plot(rf.ice, plot_pdp = TRUE, frac_to_plot = 1)
rf.ice$Xice$I_rm = ifelse(rf.ice$Xice$rm > 6.2, 1, 0)
colorvec = ifelse(rf.ice$Xice$I_rm == 1, "orange", "black")
par(mar = c(4.3, 4, 0.1, 2.3))
plot(rf.ice, frac_to_plot = 1, centered = TRUE, prop_range_y = TRUE, plot_orig_pts_preds = T, color_by = "I_rm",
colorvec = colorvec)
rf.dice = dice(rf.ice)
par(mar = c(4.3, 4, 0.5, 2.3))
plot(rf.dice)
#function that generates simulated data:
additivity_ex_sim = function(n,seednum=NULL){
if(!is.null(seednum)){
set.seed(seednum)
}
p = 2
X = as.data.frame(matrix(runif(n * p, -1, 1), ncol = p))
colnames(X) = paste("x_", 1 : p, sep = "")
bbeta = c(1,1)
y = bbeta[1] * X[,1]^2  + bbeta[2] * X[,2]
y = y + rnorm(n)
Xy = as.data.frame(cbind(X, y))
return(list(Xy=Xy,X=X,y=y))
}
# generate data:
additivity_ex_data = additivity_ex_sim(1000)
Xy = additivity_ex_data$Xy
X  = additivity_ex_data$X
y  = additivity_ex_data$y
# build gam with possible interactions:
gam_mod = gam(y~s(x_1)+s(x_2)+s(x_1*x_2),data=Xy)
# build ICE and d-ICE:
gam.ice = ice(gam_mod, X, predictor = 1, frac_to_build = 1)
gam.dice = dice(gam.ice)
# plot the ICE plot with pdp, and d-ICE with dpdp
plot(gam.ice, x_quantile = F, plot_pdp = T, frac_to_plot = 1)
plot(gam.dice, x_quantile = F, plot_dpdp = T, frac_to_plot = 1)
# Create and plot ICE object:
# To predict with the cross-validated number of trees, we pass a custom predict function
gbm.ice = ice(gbm_mod, X, predictor = "x_3",
predictfcn = function(object, newdata){predict(object, newdata, n.tree = ntree)},
frac_to_build = 1)
X
Xy = interaction_ex_data$Xy
X = interaction_ex_data$X
# Create and plot ICE object:
# To predict with the cross-validated number of trees, we pass a custom predict function
gbm.ice = ice(gbm_mod, X, predictor = "x_3",
predictfcn = function(object, newdata){predict(object, newdata, n.tree = ntree)},
frac_to_build = 1)
#plot only 5% of curves with quantiles, actual pdp, and original points.
plot(gbm.ice, x_quantile = F, plot_pdp = T, frac_to_plot = 0.05)
# Create and plot d-ICE object:
gbm.dice = dice(gbm.ice)
plot(gbm.dice, plot_orig_pts_deriv = FALSE)
library(MASS)
Boston
library(datasets)
shiny::runApp('Projects/Wlasne/reactiveTest')
shiny::runApp('Projects/Wlasne/reactiveTest')
runApp('Projects/Wlasne/reactiveTest')
## Not run:
require(ICEbox)
require(randomForest)
require(MASS) #has Boston Housing data, Pima
data(Boston) #Boston Housing data
X = Boston
y = X$medv
X$medv = NULL
## build a RF:
bh_rf = randomForest(X, y)
## Create an 'ice' object for the predictor "age":
bh.ice = ice(object = bh_rf, X = X, y = y, predictor = "age",
frac_to_build = .1)
## cluster the curves into 2 groups.
clusterICE(bh.ice, nClusters = 2, plot_legend = TRUE)
## cluster the curves into 3 groups, start all at 0.
clusterICE(bh.ice, nClusters = 3, plot_legend = TRUE, center = TRUE)
plot(bh.ice)
plot(bh.ice, centered = TRUE)
## cluster the curves into 3 groups, start all at 0.
clusterICE(bh.ice, nClusters = 3, plot_legend = TRUE, center = TRUE)
## cluster the curves into 2 groups.
clusterICE(bh.ice, nClusters = 2, plot_legend = TRUE)
plot(bh.ice)
## cluster the curves into 2 groups.
clusterICE(bh.ice, nClusters = 2, plot_legend = TRUE)
clusterICE
## cluster the curves into 2 groups.
clusterICE(bh.ice, nClusters = 2, plot_legend = FALSE, plot_margin = 1)
plot(bh.ice)
## cluster the curves into 2 groups.
clusterICE(bh.ice, nClusters = 2, plot_legend = F)
curves = t(scale(t(bh.ice$ice_curves), center = T, scale = F))
View(curves)
bh.ice$ice_curves
cl = kmeans(curves, iter.max = 20, centers = 3)
View(cl)
cl$cluster
## Create an 'ice' object for the predictor "age":
bh.ice = ice(object = bh_rf, X = X, y = y, predictor = "age",
frac_to_build = 1)
plot(bh.ice)
plot(bh.ice, centered = TRUE)
curves = t(scale(t(bh.ice$ice_curves), center = T, scale = F))
dim(curves)
View(curves)
bh.ice$ice_curves %>% head %>% view
library(magrittr)
bh.ice$ice_curves %>% head %>% view
bh.ice$ice_curves %>% head %>% View
bh.ice$ice_curves = t(scale(t(bh.ice$ice_curves), center = T, scale = F))
plot(bh.ice)
plot(bh.ice, centered = TRUE)
plot(bh.ice)
plot(bh.ice)
## Create an 'ice' object for the predictor "age":
bh.ice = ice(object = bh_rf, X = X, y = y, predictor = "age",
frac_to_build = 1)
curves = t(scale(t(bh.ice$ice_curves), center = T, scale = F))
cl = kmeans(curves, iter.max = 20, centers = 3)
cl
librar(dplyr)
library(dplyr)
colo <- case_when(cl$cluster == 1 ~ "blue", cl$cluster == 2 ~ "red", cl$cluster == 1 ~ "green")
plot(bh.ice, colorvec = colo)
colo <- case_when(cl$cluster == 1 ~ "blue", cl$cluster == 2 ~ "red", cl$cluster == 3 ~ "green")
plot(bh.ice, colorvec = colo)
plot(bh.ice, colorvec = colo, centered = T)
curves = t(scale(t(bh.ice$ice_curves), center = F, scale = F))
cl = kmeans(curves, iter.max = 20, centers = 3)
colo <- case_when(cl$cluster == 1 ~ "blue", cl$cluster == 2 ~ "red", cl$cluster == 3 ~ "green")
plot(bh.ice, colorvec = colo, centered = T)
plot(bh.ice, colorvec = colo, centered = F)
## cluster the curves into 2 groups.
clusterICE
curves = t(scale(t(bh.ice$ice_curves), center = T, scale = F))
cl = kmeans(curves, iter.max = 20, centers = 3)
## cluster the curves into 3 groups, start all at 0.
clusterICE(bh.ice, nClusters = 3, plot_legend = TRUE, center = TRUE)
clusterICE %>% View
## Create an 'ice' object for the predictor "age":
bh.ice = ice(object = bh_rf, X = X, y = y, predictor = "age",
frac_to_build = 1)
plot(bh.ice)
curves = t(scale(t(bh.ice$ice_curves), center = T, scale = F))
cl = kmeans(curves, iter.max = 20, centers = 3)
colo <- case_when(cl$cluster == 1 ~ "blue", cl$cluster == 2 ~ "red", cl$cluster == 3 ~ "green")
plot(bh.ice, colorvec = colo, centered = T)
clusterICE(bh.ice, nClusters = 3, plot_legend = TRUE, center = TRUE)
colo <- case_when(cl$cluster == 1 ~ "green", cl$cluster == 2 ~ "red", cl$cluster == 3 ~ "blue")
plot(bh.ice, colorvec = colo, centered = T)
clusterICE(bh.ice, nClusters = 3, plot_legend = TRUE, center = TRUE)
clusterICE(bh.ice, nClusters = 3, plot_legend = TRUE, center = TRUE, plot_pdp = TRUE)
clusterICE(bh.ice, nClusters = 1, plot_legend = TRUE, center = TRUE, plot_pdp = TRUE)
clusterICE(bh.ice, nClusters = 1, plot_legend = TRUE, center = TRUE, plot_pdp = F)
clusterICE(bh.ice, nClusters = 3, plot_legend = TRUE, center = TRUE, plot = F)
clusterICE(bh.ice, nClusters = 3, plot_legend = TRUE, center = TRUE, plot = T)
library(pdp)
predcomps
ice
ice %>% View
order(c(1,5,4,3,2,1))
order(c(1,5,4,3,2))
v <- rnorm(10)
v
order(v, 1:10)
(ii <- order(x <- c(1,1,3:1,1:4,3), y <- c(9,9:1), z <- c(2,1:9)))
## 6  5  2  1  7  4 10  8  3  9
rbind(x, y, z)[,ii] # shows the reordering (ties via 2nd & 3rd arg)
#sorting examples using the mtcars dataset
attach(mtcars)
mpg
order(mpg)
v
order(v)
v <- unif(6)
v <- runif(6)
order(v)
v
# sort by mpg
newdata <- mtcars[order(mpg),]
View(newdata)
newdata$runif <- runif(32)
# sort by mpg
newdata <- mtcars[order(runif),]
attach(newdata)
# sort by mpg
newdata <- mtcars[order(runif),]
# sort by mpg
newdata <- mtcars[order(mpg),]
newdata$runif <- runif(32)
attach(newdata)
# sort by mpg
newdata <- newdata[order(runif),]
order(mtcars$runif)
order(newdata$runif)
vv <- runif(12)
order(vv)
vv
order(vv)
sort(vv)
vv[order(vv)]
1/0.2
dice %>% View
with(cars, {
plot(speed, dist)
lines(supsmu(speed, dist))
lines(supsmu(speed, dist, bass = 7), lty = 2)
})
cars
supsmu(speed, dist, bass = 7)
supsmu(cars$speed, cars$dist, bass = 7)
plot(cars$speed, cars$dist)
lines(supsmu(cars$speed, cars$dist, bass = 7)$x, supsmu(cars$speed, cars$dist, bass = 7)$y)
with(cars, {
plot(speed, dist)
lines(supsmu(speed, dist))
lines(supsmu(speed, dist, bass = 7), lty = 2)
})
D1tr(x = cars$speed, y = supsmu(x = cars$speed, y = cars$dist)$y)
supsmu(x = cars$speed, y = cars$dist)
cars$speed
D1tr(x = unique(cars$speed), y = supsmu(x = cars$speed, y = cars$dist)$y)
cars$speed %>% unique()
plot(cars$speed, cars$dist)
lines(unique(cars$speed), D1tr(x = unique(cars$speed), y = supsmu(x = cars$speed, y = cars$dist)$y))
lines(supsmu(cars$speed, cars$dist, bass = 7)$x, supsmu(cars$speed, cars$dist, bass = 7)$y)
lines(supsmu(cars$speed, cars$dist, bass = 7)$x, supsmu(cars$speed, cars$dist, bass = 7)$y)
D1tr
plot.ice
getAnywhere(plot.ice)
getAnywhere(plot.ice) %>% View
getAnywhere(plot.ice)
ice %>% View
data(Boston) #Boston Housing data
X = Boston
y = X$medv
X$medv = NULL
## build a RF:
bh_rf = randomForest(X, y)
## Create an 'ice' object for the predictor "age":
bh.ice = ice(object = bh_rf, X = X, y = y, predictor = "age",
frac_to_build = 1)
plot(bh.ice, plot_orig_pts_preds = TRUE)
plot(bh.ice, plot_orig_pts_preds = F)
plot(bh.ice, plot_orig_pts_preds = F, plot_points_indices = 1)
plot(bh.ice, plot_orig_pts_preds = T, plot_points_indices = 1)
plot(bh.ice, plot_orig_pts_preds = T, plot_points_indices = 0.5)
plot(bh.ice, plot_orig_pts_preds = T, plot_points_indices = c(1,2,3,4,5))
plot(bh.ice, plot_orig_pts_preds = T, x_quantile = T)
plot(bh.ice, plot_orig_pts_preds = T, x_quantile = F)
plot(bh.ice, plot_orig_pts_preds = T, x_quantile = F)
plot(bh.ice, plot_orig_pts_preds = T, plot_points_indices = c(1,2))
plot(bh.ice, plot_orig_pts_preds = T, plot_points_indices = c(1,2), point_labels = c("oko", "nos"))
bh.ice2 = ice(object = bh_rf, X = X, y = y, predictor = "age",
indices_to_build = 2)
plot(bh.ice2, plot_orig_pts_preds = T, plot_points_indices = c(1,2), point_labels = c("oko", "nos"))
plot(bh.ice2)
bh.ice2 = ice(object = bh_rf, X = X, y = y, predictor = "age",
indices_to_build = c(1,2))
plot(bh.ice2)
plot(bh.ice2, plot_orig_pts_preds = T, plot_points_indices = c(1,2), point_labels = c("oko", "nos"))
bh.ice2 = ice(object = bh_rf, X = X, y = y, predictor = "age",
indices_to_build = c(1,2,3))
plot(bh.ice2)
plot(bh.ice2, plot_orig_pts_preds = T, plot_points_indices = c(1,2), point_labels = c("oko", "nos"))
plot(bh.ice2, plot_orig_pts_preds = T, plot_points_indices = c(1,2), point_labels = c("oko", "nos", "noga"))
plot(bh.ice, plot_orig_pts_preds = T, x_quantile = F, centered = T)
plot(bh.ice, plot_orig_pts_preds = T, x_quantile = F, centered = T, prop_range_y = F)
plot(bh.ice, plot_orig_pts_preds = T, x_quantile = F)
plot(bh.ice, plot_orig_pts_preds = T, x_quantile = F, centered = T, prop_range_y = F)
plot(bh.ice, plot_orig_pts_preds = T, x_quantile = F, centered = F, prop_range_y = F, rug_quantile = c(0, 0.25, 0.5, 0.75, 1))
getAnywhere(plot.dice)
library(readr)
top250 <- read_csv("Projects/LabMasters/4 WDA Millennium/Dane/top250.csv")
View(top250)
library(readr)
top250 <- read_delim("Projects/LabMasters/4 WDA Millennium/Dane/top250.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(top250)
library(magrittr)
library(copula)
library(dplyr)
library(purrr)
dane <- read.csv2("indeksy.csv")
dane_wynikowe <- dane[, c("Zamkniecie", "PKO")]
colnames(dane_wynikowe) <- c("x", "y")
n <- 2521
gamma <- 0.05
dane_wynikowe <- dane_wynikowe %>%
mutate(
Zamkniecie_stopa = log(Zamkniecie) - log(lag(Zamkniecie)),
PKO_stopa = log(PKO) - log(lag(PKO))) %>%
select(Zamkniecie_stopa, PKO_stopa) %>%
rename(X = Zamkniecie_stopa, Y = PKO_stopa)
dane <- read.csv2("indeksy.csv")
dane_wynikowe <- dane[, c("Zamkniecie", "PKO")]
n <- 2521
gamma <- 0.05
dane_wynikowe <- dane_wynikowe %>%
mutate(
Zamkniecie_stopa = log(Zamkniecie) - log(lag(Zamkniecie)),
PKO_stopa = log(PKO) - log(lag(PKO))) %>%
select(Zamkniecie_stopa, PKO_stopa) %>%
rename(X = Zamkniecie_stopa, Y = PKO_stopa)
library(readr)
dane <- read_delim("indeksy.csv", sep = ";")
dane <- read_delim("indeksy.csv", delim = ";")
View(dane)
dane_wynikowe <- dane[, c("Zamkniecie", "PKO")]
n <- 2521
gamma <- 0.05
dane_wynikowe <- dane_wynikowe %>%
mutate(
Zamkniecie_stopa = log(Zamkniecie) - log(lag(Zamkniecie)),
PKO_stopa = log(PKO) - log(lag(PKO))) %>%
select(Zamkniecie_stopa, PKO_stopa) %>%
rename(X = Zamkniecie_stopa, Y = PKO_stopa)
mtcars
model <- lm(mpg ~ ., mtcars)
plot(model)
model
model$coefficients
model %>% summary()
library(dplyr)
model %>% summary()
model %>% summary() -> de
shiny::runApp('Projects/LabMasters/Warsztaty_shiny/regresja')
runApp('Projects/LabMasters/Warsztaty_shiny/regresja')
runApp('Projects/LabMasters/Warsztaty_shiny/regresja')
runApp('Projects/LabMasters/Warsztaty_shiny/regresja')
runApp('Projects/LabMasters/Warsztaty_shiny/regresja')
summary(model)
View(de)
View(model)
runApp('Projects/LabMasters/Warsztaty_shiny/regresja')
plot(model)
plot(model)
runApp('Projects/LabMasters/Warsztaty_shiny/regresja')
